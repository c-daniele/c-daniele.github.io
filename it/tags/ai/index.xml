<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>ai on Cdani&#39;s Blog</title>
    <link>https://c-daniele.github.io/it/tags/ai/</link>
    <description>Recent content in ai on Cdani&#39;s Blog</description>
    <image>
      <title>Cdani&#39;s Blog</title>
      <url>https://c-daniele.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://c-daniele.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-IT</language>
    <lastBuildDate>Sun, 31 Aug 2025 00:00:00 +0200</lastBuildDate><atom:link href="https://c-daniele.github.io/it/tags/ai/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AlphaAgents: Implementazione Multi-Agent A2A per Analisi Finanziaria Collaborativa</title>
      <link>https://c-daniele.github.io/it/posts/2025-08-31-alphaagents-a2a/</link>
      <pubDate>Sun, 31 Aug 2025 00:00:00 +0200</pubDate>
      
      <guid>https://c-daniele.github.io/it/posts/2025-08-31-alphaagents-a2a/</guid>
      <description>1. Introduzione La quantità di framework che sta nascendo per lo sviluppo di applicazioni di GenAI è incredibile e a mio avviso inizia ad essere pure eccessiva. Ogniqualvolta salta fuori un nuovo framework, mi sembra che faccia più o meno le stesse cose di quello precedente. Magari alcuni hanno una capacità di modularizzazione migliore, oppure un disegno più robusto contro l&amp;rsquo;obsolescenza nel lungo periodo, ma più o meno mi sembrano tutti gli stessi e, sebbene mi piaccia sperimentare, lo studio di nuovi mirabolanti e promettenti framework di GenAI comincia ad appassionarmi sempre meno.</description>
    </item>
    
    <item>
      <title>Agent-Reg: Costruire un Agent Registry aperto per il Protocollo A2A</title>
      <link>https://c-daniele.github.io/it/posts/2025-08-15-agent-reg-for-a2a/</link>
      <pubDate>Fri, 15 Aug 2025 00:00:00 +0200</pubDate>
      
      <guid>https://c-daniele.github.io/it/posts/2025-08-15-agent-reg-for-a2a/</guid>
      <description>Introduzione Tra una cosa e l&amp;rsquo;altra, in queste incandescenti giornate di agosto, ne ho approfittato per leggere bene la specifica del protocollo A2A di Google e provare a capire come utilizzarne i concetti per disegnare una un&amp;rsquo;architettura enterprise di Agenti, possibilmente slegata da vincoli di piattaforma tecnologica.
Che cos&amp;rsquo;è A2A? Il Protocollo Agent2Agent (A2A) è uno standard aperto progettato e condiviso pubblicamente da Google per facilitare la comunicazione e la collaborazione degli agenti AI.</description>
    </item>
    
    <item>
      <title>Oltre il RAG: Come analizzare efficacemente un file Excel tramite un LLM</title>
      <link>https://c-daniele.github.io/it/posts/2025-07-05-advanced-tecnique-for-analyzing-excel-files-with-llms/</link>
      <pubDate>Sat, 05 Jul 2025 00:00:00 +0200</pubDate>
      
      <guid>https://c-daniele.github.io/it/posts/2025-07-05-advanced-tecnique-for-analyzing-excel-files-with-llms/</guid>
      <description>Introduzione Come sviluppatori AI, cerchiamo sempre modi migliori per accedere ai dati e analizzarli in linguaggio naturale. Sebbene la Retrieval-Augmented Generation (RAG) abbia rivoluzionato il modo in cui interagiamo con documenti testuali non strutturati, essa mostra dei limiti quando si prova ad adottare le medesime tecniche sui dati strutturati.
D&amp;rsquo;altro canto, l’approccio RAG si è dimostrato talmente efficace e versatile che utenti e sviluppatori AI alle prime armi possono cadere nell’illusione che sia applicabile a qualsiasi tipo di dato, inclusi i file strutturati o semistrutturati come gli Excel.</description>
    </item>
    
    <item>
      <title>Policy Puppetry Prompt Injection</title>
      <link>https://c-daniele.github.io/it/posts/2025-05-15-policy-puppetry/</link>
      <pubDate>Thu, 15 May 2025 00:00:00 +0200</pubDate>
      
      <guid>https://c-daniele.github.io/it/posts/2025-05-15-policy-puppetry/</guid>
      <description>Policy Puppetry Prompt Injection Qualche giorno fa ho fatto qualche esperimento con alcune tecniche di Jailbraking, che condivido nel repo. Sono partito da un articolo di HiddenLayer, di qualche settimana fa, in cui il team di ricerca ha pubblicato un articolo che descrive una tecnica piuttosto creativa e ingegnosa di jailbreaking, per bypassare i safety guardails e l&amp;rsquo;allineamento dei modelli di frontiera. La tecnica sembra essere universale ed applicabile con un singolo prompt a più modelli ed è in grado di mostrare contenuti tipicamente non safety o addirittura mostrare porzioni del system prompt nativo.</description>
    </item>
    
    <item>
      <title>Langchain pt. 3 - Come invocare API Rest in linguaggio naturale</title>
      <link>https://c-daniele.github.io/it/posts/2024-04-20-langchain-api/</link>
      <pubDate>Sat, 20 Apr 2024 19:00:00 +0200</pubDate>
      
      <guid>https://c-daniele.github.io/it/posts/2024-04-20-langchain-api/</guid>
      <description>Intro L&amp;rsquo;anno scorso, Gartner ha inserito la Generative AI nella fase di picco di aspettative all&amp;rsquo;interno del suo modello di Hype Cycle per il mondo della AI.
Recentemente alcuni nomi importanti tra le grandi aziende del settore hanno paragonato l&amp;rsquo;entusiasmo della GenAI alla bolla dotcom. Inoltre sono circolate delle indiscrezioni intorno ai principali Cloud Providers, secondo le quali essi stiano addirittura dando indicazioni ai loro Sales Team di rallentare l&amp;rsquo;entusiasmo dimostrato verso i clienti nei confronti delle iniziative di GenAI, o comunque di utilizzare un approccio cauto e consapevole dei costi e dei reali benefici.</description>
    </item>
    
    <item>
      <title>Langchain pt. 2 - Analisi dati tramite Agenti</title>
      <link>https://c-daniele.github.io/it/posts/2023-08-13-langchain-agents/</link>
      <pubDate>Sun, 13 Aug 2023 19:00:00 +0200</pubDate>
      
      <guid>https://c-daniele.github.io/it/posts/2023-08-13-langchain-agents/</guid>
      <description>Intro Nel precedente articolo ho fatto una brevissima panoramica di LangChain, descrivendone i concetti principali e raccontando un esempio di caso d&amp;rsquo;uso con dati non strutturati in formato pdf.
Seguendo lo stesso approccio, in questo articolo faremo una breve introduzione sugli Agenti e procederemo provando a rispondere ad una domanda ambiziosa:
è possibile, tramite l&amp;rsquo;AI, fare analisi sui dati presenti in un DB senza alcuna conoscenza di SQL né tantomeno del modello dati, a partire semplicemente da un prompt testuale in lingua naturale?</description>
    </item>
    
    <item>
      <title>LLM - Esperimenti con LangChain - Parte 1</title>
      <link>https://c-daniele.github.io/it/posts/2023-07-24-langchain-helloworld-pdf/</link>
      <pubDate>Mon, 24 Jul 2023 17:45:02 +0200</pubDate>
      
      <guid>https://c-daniele.github.io/it/posts/2023-07-24-langchain-helloworld-pdf/</guid>
      <description>Intro Per chi non lo conoscesse, LangChain è un framework per lo sviluppo di applicazioni che fanno uso di LLMs.
Come si evince dal nome stesso, LangChain si basa sul concetto di Catena LLM, la quale combina 3 elementi:
I Prompt Templates: fanno riferimento ad un modo riproducibile per generare un prompt. Contiene una stringa di testo (&amp;ldquo;il modello&amp;rdquo;), che può accettare una serie di parametri dall&amp;rsquo;utente finale e genera il prompt definitivo che viene passato in input al modello Il modello linguistico (LLM): in particolare, LangChain si integra con i provider più importanti (OpenAI, Cohere, Hugging Face, etc) Gli Output Parsers: consentono di estrarre dati in forma strutturata dalle risposte restituite dal modello linguistico I Prompt Templates: fanno riferimento ad un modo riproducibile per generare un prompt.</description>
    </item>
    
  </channel>
</rss>
