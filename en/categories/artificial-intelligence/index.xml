<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Artificial Intelligence on Cdani&#39;s Blog</title>
    <link>https://c-daniele.github.io/en/categories/artificial-intelligence/</link>
    <description>Recent content in Artificial Intelligence on Cdani&#39;s Blog</description>
    <image>
      <title>Cdani&#39;s Blog</title>
      <url>https://c-daniele.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>https://c-daniele.github.io/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Sun, 31 Aug 2025 00:00:00 +0200</lastBuildDate><atom:link href="https://c-daniele.github.io/en/categories/artificial-intelligence/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>AlphaAgents: Multi-Agent A2A Implementation for Collaborative Financial Analysis</title>
      <link>https://c-daniele.github.io/en/posts/2025-08-31-alphaagents-a2a/</link>
      <pubDate>Sun, 31 Aug 2025 00:00:00 +0200</pubDate>
      
      <guid>https://c-daniele.github.io/en/posts/2025-08-31-alphaagents-a2a/</guid>
      <description>1. Introduction The quantity of frameworks emerging for GenAI application development is incredible and, in my opinion, is becoming excessive. Every time a new framework appears, it seems to do more or less the same things as the previous one. Perhaps some have better modularization capabilities or more robust design against long-term obsolescence, but they all seem pretty much the same to me and, although I enjoy experimenting, the study of new miraculous and promising GenAI frameworks is becoming less and less appealing.</description>
    </item>
    
    <item>
      <title>Agent-Reg: Building an Open Agent Registry for A2A Protocol</title>
      <link>https://c-daniele.github.io/en/posts/2025-08-15-agent-reg-for-a2a/</link>
      <pubDate>Fri, 15 Aug 2025 00:00:00 +0200</pubDate>
      
      <guid>https://c-daniele.github.io/en/posts/2025-08-15-agent-reg-for-a2a/</guid>
      <description>Introduction During these scorching August days, I took the opportunity to thoroughly read Google&amp;rsquo;s A2A protocol specification and try to understand how to use its concepts to design an enterprise Agent architecture, possibly free from technological or platform constraints.
What is A2A? The Agent2Agent (A2A) Protocol is an open standard designed and publicly shared by Google to facilitate communication and collaboration among AI agents. The standardization of AI interoperability model is a topic that has been discussed since the very first moments when we started talking about Agents, and there are several reasons for this:</description>
    </item>
    
    <item>
      <title>Beyond RAG: How to Effectively Analyze an Excel File Using an LLM</title>
      <link>https://c-daniele.github.io/en/posts/2025-07-05-advanced-tecnique-for-analyzing-excel-files-with-llms/</link>
      <pubDate>Sat, 05 Jul 2025 00:00:00 +0200</pubDate>
      
      <guid>https://c-daniele.github.io/en/posts/2025-07-05-advanced-tecnique-for-analyzing-excel-files-with-llms/</guid>
      <description>Abstract As AI developers, we&amp;rsquo;re always looking for ways to make data more accessible and queryable through natural language. While Retrieval-Augmented Generation (RAG) has revolutionized how we interact with unstructired textual documents, it falls short when dealing with structured data. The RAG approach is so powerful that users or even early stage AI developers may fall in the illusion that it can be applied to any kind of data, including structured data like Excel files.</description>
    </item>
    
    <item>
      <title>Policy Puppetry Prompt Injection</title>
      <link>https://c-daniele.github.io/en/posts/2025-05-15-policy-puppetry/</link>
      <pubDate>Thu, 15 May 2025 00:00:00 +0200</pubDate>
      
      <guid>https://c-daniele.github.io/en/posts/2025-05-15-policy-puppetry/</guid>
      <description>Policy Puppetry Prompt Injection A few days ago, I experimented with some Jailbreaking techniques, which I share in the repo.
I started from a HiddenLayer article published a few weeks ago, where the research team described a rather creative and ingenious jailbreaking technique to bypass safety guardrails and the alignment of frontier models.
The technique appears to be universal and applicable with a single prompt to multiple models, capable of revealing typically unsafe content or even portions of the native system prompt.</description>
    </item>
    
    <item>
      <title>Langchain pt. 3 - How to call Rest API in natural language</title>
      <link>https://c-daniele.github.io/en/posts/2024-04-20-langchain-api/</link>
      <pubDate>Sat, 20 Apr 2024 19:00:00 +0200</pubDate>
      
      <guid>https://c-daniele.github.io/en/posts/2024-04-20-langchain-api/</guid>
      <description>Intro Last year, Gartner put Generative AI at the peak of inflated expectations in its AI Hype Cycle.
Recently, big tech leaders compared the hype around GenAI to the dotcom bubble. Furthermore, according to some rumors, the main Cloud Providers are even giving instructions to their Sales Teams to slow down the enthusiasm towards customers regarding GenAI initiatives and promoting cost-vs-benefits awareness. Has the drop into the trough of disillusionment already begun?</description>
    </item>
    
    <item>
      <title>Langchain pt. 2 - Data Analysis through Agents</title>
      <link>https://c-daniele.github.io/en/posts/2023-08-13-langchain-agents/</link>
      <pubDate>Sun, 13 Aug 2023 19:00:00 +0200</pubDate>
      
      <guid>https://c-daniele.github.io/en/posts/2023-08-13-langchain-agents/</guid>
      <description>Intro In the previous article I gave a very brief overview of LangChain, describing its main concepts with some examples with unstructured data in pdf format.
Following the same approach, in this article we will give a brief introduction to Agents and proceed by trying to answer an ambitious question:
leveraging these new AI tools, can we carry out data analysis on our DB without any knowledge of SQL nor of the data model, simply starting from a text prompt in natural language?</description>
    </item>
    
    <item>
      <title>LLM - Experimenting LangChain - Part 1</title>
      <link>https://c-daniele.github.io/en/posts/2023-07-24-langchain-helloworld-pdf/</link>
      <pubDate>Mon, 24 Jul 2023 17:45:02 +0200</pubDate>
      
      <guid>https://c-daniele.github.io/en/posts/2023-07-24-langchain-helloworld-pdf/</guid>
      <description>Intro For those unfamiliar with it, LangChain is a framework for developing applications that make use of LLMs.
As the name suggests, LangChain is based on the concept of LLM Chain, which combines 3 elements:
Prompt Templates: they refer to a reproducible way to generate a prompt. Contains a text string (&amp;ldquo;the model&amp;rdquo;), which can accept a series of parameters from the end user and generates the definitive prompt which is passed as input to the model The language model (LLM): LangChain integrates with the most important providers (OpenAI, Cohere, Hugging Face, etc) Output Parsers: allow to extract structure data form from the answers returned by the linguistic model The framework has 2 very interesting features:</description>
    </item>
    
  </channel>
</rss>
